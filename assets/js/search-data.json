{
  
    
        "post0": {
            "title": "Data Science Week 1",
            "content": "What is data science? . The statistician William S. Cleveland defined data science as an interdisciplenary field larger than statistics itself. . statistics | machine learning | programming / computer science | data engineering | as manageing the process that can transform hypotheses and data into actionable predictions. | . The data scientist is responsible for: . Data: acquiring the data | Modeling: choosing the modeling technique, writing the code | Evaluation: verifying the results | .",
            "url": "https://bollam1214.github.io/blog/nccu/cs/data%20science/2021/09/16/data1.html",
            "relUrl": "/nccu/cs/data%20science/2021/09/16/data1.html",
            "date": " • Sep 16, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Computer Networks Ch1",
            "content": "Why this course? . Computer network is an essential enabling technology to help users to develop network based applications that can reach everywhere instantly. An MIS student (as an architect, and a designer) need to be familiar with the underlying technologies and their design rationale. Hence, we can develop network applications with a more appropriate, reasonable, and robust design. . And more, help your parents to deal with home network problems. . Desired Outcomes . They know the most common design in the current computer network. | They understand what hardware or software should be used in a complex computer network. | They can analyze the performance of a protocol, both theoretically and experimentally. | They can recognize the trade-offs between different protocol designs. | They can write socket programs with network libraries. | They have experience working with network devices. | They can manage a complex enterprise network. | They can monitor the network packet and analyze them. | They can identify network security problems and solve them. | . . Warning: We will NOT cover any programming details. Assignments and projects need a certain level of programming skills. . What can computer network do? . Examples: Enterprise network . Daily operation PCs, access network, e-mail server, web site, Wi-Fi, VoIP, wireless projector, database server, file server, firewall, (virtual and physical) access control, directory service,… | . | Business Game: PC/App, response time, synchronization, flexible (scaling) server, in-game VoIP, streaming, re-join,… | Digital currency exchange: total number of users, new user per second, denial of service, encrypted communication, … | Streaming: content delivery network, (network, computation) load balance,… | App: data format, protocol,… | . | . What do you expect yourself dealing with in the future? Daily operation or business problem? . Chapter 1: Introduction . our goal: . get “feel” and terminology | more depth, detail later in course | approach: use Internet as example | . overview: . what’s the Internet and a protocol? | network edge: hosts, access net, physical media | network core: packet/circuit switching, Internet structure | performance: loss, delay, throughput | protocol layers, service models | history | . What&#39;s the Internet . billions of connected devices running network apps via different communication links. | infrastructure that provides services to applications | . History: Arpanet . John Naughton(2000) . communication links, packet switches | ISP, protocols:TCP IP HTTP Skype 802.11(IETF的編號) | Internet standards: IETF(Internet Engineering Task Force)會匯集產官學界，審核編修RFC(request for comments)(protocol計劃書) | network structure: network edge, access networks(last mile) , network core | . Difference between DSL and cable . type 特性 線路 頻寬 價格 傳輸方式 舉例 . DSL | 繼承自電話 | 線路獨佔 | 獨享頻寬 | 較高 | point to point | 大樓有一百戶就有一百條電話線 | . cable | 繼承自電視 | 線路共享 | 共用頻寬 | 較低 | broadcast | 小社區可能只共用一條同軸纜線 | . Wireless access networks . via base station aka &quot;access point&quot; (不論行動網路或WiFi) | 但在台灣基地台專指裝在頂樓的4G、5G基地台，而AP則專指WiFi用的 | Wireless LANs: WiFi6速度現在堪比有線網路了，但唯一無法克服的是光的所有性質：反射、折射、繞射、干涉... | . &#38971;&#29575;&#39640;: &#31359;&#36879;&#24314;&#31689;&#29289;&#33021;&#21147;&#36611;&#24375;&#12289;&#32350;&#23556;&#33021;&#21147;&#36611;&#24046;&#12289;&#33021;&#37327;&#36611;&#39640; . WiFi實際上是商標的名字，不是指技術(e.g. WiFi6：IEEE 802.11ax) . . Note: a router acts as a server (bank counter), like a post office. . Questionnaire . Is there any other network besides Internet? factory network, satellite network... | In a non-electronic era,what are the end-host, link, and router? Beacon、Flag semaphore | example of uni-direction service? walkie talkie | Why do we need to learn machine protocol? | What is the difference between client and server? | Why do we need routers? | What is the scenario to use wireless or wired network? | WirelessWAN (wide area network)? Starlink | Why radio frequency is valuable? | . Google: . Arpanet | Taiwan’s ISP map: https://map.twnic.net.tw/ | Internet vs internet | Wiki: Internet Protocols | Phone splitter | ADSL modem | VDSL modem | DSL speed? 24M/2.5M | 電信箱 | Taiwan 4G/5G spectrum; WiFi 4/5/6 | RJ45, cross-line | who invent using fiber for data transmission? | Cisco switch 2950/2960; router 3560/3650 | .",
            "url": "https://bollam1214.github.io/blog/nccu/mis/conputer%20networks/2021/09/14/net1.html",
            "relUrl": "/nccu/mis/conputer%20networks/2021/09/14/net1.html",
            "date": " • Sep 14, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Deep Learning Ch2 Notes",
            "content": "Testing Functions . The project I&#39;ll be completing in this chapter is a duck detector. It will discriminate between three types of duck: white, green head, and rubber ducks. . At the time of writing, Bing Image Search is the best option we know of for finding and downloading images. It&#39;s free for up to 1,000 queries per month, and each query can download up to 150 images. . key = os.environ.get(&#39;AZURE_SEARCH_KEY&#39;, &#39;XXX&#39;) . Once you&#39;ve set key, you can use search_images_bing. This function is provided by the small utils class included with the notebooks online. If you&#39;re not sure where a function is defined, you can just type it in your notebook to find out: . search_images_bing . &lt;function fastbook.search_images_bing&gt; . results = search_images_bing(key, &#39;duck&#39;) ims = results.attrgot(&#39;contentUrl&#39;) len(ims) . 150 . We&#39;ve successfully downloaded the URLs of 150 ducks (or, at least, images that Bing Image Search finds for that search term). . dest = &#39;gdrive/MyDrive/images/green head.jpg&#39; download_url(ims[0], dest) im = Image.open(dest) im.to_thumb(128,128) . path = Path(&#39;gdrive/MyDrive/images/pedo bear&#39;) if not path.exists(): path.mkdir() path.mkdir(exist_ok=True) results = search_images_bing(key, &#39;pedo bear&#39;) download_images(path, urls=results.attrgot(&#39;contentUrl&#39;)) . Our folder has image files, as we&#39;d expect: . fns = get_image_files(path) fns . (#148) [Path(&#39;gdrive/MyDrive/images/pedo bear/00000003.jpg&#39;),Path(&#39;gdrive/MyDrive/images/pedo bear/00000004.png&#39;),Path(&#39;gdrive/MyDrive/images/pedo bear/00000001.png&#39;),Path(&#39;gdrive/MyDrive/images/pedo bear/00000008.png&#39;),Path(&#39;gdrive/MyDrive/images/pedo bear/00000011.jpg&#39;),Path(&#39;gdrive/MyDrive/images/pedo bear/00000009.png&#39;),Path(&#39;gdrive/MyDrive/images/pedo bear/00000006.png&#39;),Path(&#39;gdrive/MyDrive/images/pedo bear/00000005.jpg&#39;),Path(&#39;gdrive/MyDrive/images/pedo bear/00000010.png&#39;),Path(&#39;gdrive/MyDrive/images/pedo bear/00000013.jpg&#39;)...] . This seems to have worked nicely, so let&#39;s use fastai&#39;s download_images to download all the URLs for each of our search terms. We&#39;ll put each in a separate folder: . Let&#39;s Get The Training Started! . duck_types = &#39;white&#39;, &#39;green head&#39;, &#39;rubber&#39; path = Path(&#39;gdrive/MyDrive/images/ducks&#39;) if not path.exists(): path.mkdir() for o in duck_types: dest = (path/o) dest.mkdir(exist_ok=True) results = search_images_bing(key, f&#39;{o} duck&#39;) download_images(dest, urls=results.attrgot(&#39;contentUrl&#39;)) fns = get_image_files(path) fns . Often when we download files from the internet, there are a few that are corrupt. Let&#39;s check: . path = Path(&#39;gdrive/MyDrive/images/ducks&#39;) . (#444) [Path(&#39;gdrive/MyDrive/images/ducks/white/00000004.jpg&#39;),Path(&#39;gdrive/MyDrive/images/ducks/white/00000001.jpg&#39;),Path(&#39;gdrive/MyDrive/images/ducks/white/00000005.jpg&#39;),Path(&#39;gdrive/MyDrive/images/ducks/white/00000007.jpg&#39;),Path(&#39;gdrive/MyDrive/images/ducks/white/00000011.jpg&#39;),Path(&#39;gdrive/MyDrive/images/ducks/white/00000010.jpg&#39;),Path(&#39;gdrive/MyDrive/images/ducks/white/00000002.jpg&#39;),Path(&#39;gdrive/MyDrive/images/ducks/white/00000000.jpg&#39;),Path(&#39;gdrive/MyDrive/images/ducks/white/00000003.jpg&#39;),Path(&#39;gdrive/MyDrive/images/ducks/white/00000009.jpg&#39;)...] . failed = verify_images(fns) failed . (#3) [Path(&#39;gdrive/MyDrive/images/ducks/rubber/00000028.jpg&#39;),Path(&#39;gdrive/MyDrive/images/ducks/rubber/00000061.jpg&#39;),Path(&#39;gdrive/MyDrive/images/ducks/rubber/00000081.jpg&#39;)] . To remove all the failed images, you can use unlink on each of them. Note that, like most fastai functions that return a collection, verify_images returns an object of type L, which includes the map method. This calls the passed function on each element of the collection: . failed.map(Path.unlink) . From Data to DataLoaders . We need to tell fastai at least four things: . What kinds of data we are working with | How to get the list of items | How to label these items | How to create the validation set | . With data block API you can fully customize every stage of the creation of your DataLoaders. Here is what we need to create a DataLoaders for the dataset that we just downloaded: . ducks = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=Resize(128)) . DataBlock is like a template for creating a DataLoaders. We still need to tell fastai the actual source of our data—in this case, the path where the images can be found: . dls = ducks.dataloaders(path) dls.valid.show_batch(max_n=4, nrows=1) . Data Augmentation . ducks = ducks.new(item_tfms=Resize(224), batch_tfms=aug_transforms(mult=2)) dls = ducks.dataloaders(path) dls.train.show_batch(max_n=8, nrows=2, unique=True) . /usr/local/lib/python3.7/dist-packages/torch/_tensor.py:1023: UserWarning: torch.solve is deprecated in favor of torch.linalg.solveand will be removed in a future PyTorch release. torch.linalg.solve has its arguments reversed and does not return the LU factorization. To get the LU factorization see torch.lu, which can be used with torch.lu_solve or torch.lu_unpack. X = torch.solve(B, A).solution should be replaced with X = torch.linalg.solve(A, B) (Triggered internally at /pytorch/aten/src/ATen/native/BatchLinearAlgebra.cpp:760.) ret = func(*args, **kwargs) . Learner and Confusion Matrix . learn = cnn_learner(dls, resnet18, metrics=accuracy) learn.fine_tune(4) . Downloading: &#34;https://download.pytorch.org/models/resnet18-f37072fd.pth&#34; to /root/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth . . /usr/local/lib/python3.7/dist-packages/torch/nn/functional.py:718: UserWarning: Named tensors and all their associated APIs are an experimental feature and subject to change. Please do not use them for anything important until they are released as stable. (Triggered internally at /pytorch/c10/core/TensorImpl.h:1156.) return torch.max_pool2d(input, kernel_size, stride, padding, dilation, ceil_mode) . epoch train_loss valid_loss accuracy time . 0 | 1.509567 | 0.091312 | 0.965909 | 00:17 | . /usr/local/lib/python3.7/dist-packages/PIL/Image.py:960: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; /usr/local/lib/python3.7/dist-packages/PIL/Image.py:960: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; . epoch train_loss valid_loss accuracy time . 0 | 0.328706 | 0.051048 | 0.977273 | 00:17 | . 1 | 0.249838 | 0.024654 | 0.988636 | 00:17 | . 2 | 0.193008 | 0.016960 | 1.000000 | 00:18 | . 3 | 0.154048 | 0.015811 | 1.000000 | 00:17 | . /usr/local/lib/python3.7/dist-packages/PIL/Image.py:960: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; /usr/local/lib/python3.7/dist-packages/PIL/Image.py:960: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; /usr/local/lib/python3.7/dist-packages/PIL/Image.py:960: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; /usr/local/lib/python3.7/dist-packages/PIL/Image.py:960: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; /usr/local/lib/python3.7/dist-packages/PIL/Image.py:960: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; /usr/local/lib/python3.7/dist-packages/PIL/Image.py:960: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; /usr/local/lib/python3.7/dist-packages/PIL/Image.py:960: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() . Turning Your Model into an Online Application . learn.export() path = Path() path.ls(file_exts=&#39;.pkl&#39;) . (#1) [Path(&#39;export.pkl&#39;)] . %mv export.pkl gdrive/MyDrive/ learn_inf = load_learner(path/&#39;gdrive/MyDrive/export.pkl&#39;) learn_inf.dls.vocab . [&#39;green head&#39;, &#39;rubber&#39;, &#39;white&#39;] . Creating a Notebook App from the Model . With ipywidgets, we can build up our GUI step by step. We will use this approach to create a simple image classifier. First, we need a file upload widget: . btn_upload = widgets.FileUpload() btn_upload . . img = PILImage.create(btn_upload.data[-1]) img . We can use an Output widget to display it: . out_pl = widgets.Output() out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) out_pl . Then we can get our predictions: . pred,pred_idx,probs = learn_inf.predict(img) . and use a Label to display them: . lbl_pred = widgets.Label() lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; lbl_pred . Label(value=&#39;Prediction: white; Probability: 1.0000&#39;) . We&#39;ll need a button to do the classification. It looks exactly like the upload button: . btn_run = widgets.Button(description=&#39;Classify&#39;) btn_run . . We&#39;ll also need a click event handler; that is, a function that will be called when it&#39;s pressed. . def on_click_classify(change): img = PILImage.create(btn_upload.data[-1]) out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) pred,pred_idx,probs = learn_inf.predict(img) lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; btn_run.on_click(on_click_classify) . You can test the button now by pressing it, and you should see the image and predictions update automatically! . We can now put them all in a vertical box (VBox) to complete our GUI: . VBox([widgets.Label(&#39;Select your duck!&#39;), btn_upload, btn_run, out_pl, lbl_pred]) . . DeployingYour Notebook into a Real App . For at least the initial prototype of your application, and for any hobby projects that you want to show off, you can easily host them for free. In early 2020 the simplest (and free!) approach is to use Binder. . Get Writing! . Rachel Thomas, cofounder of fast.ai, wrote in the article &quot;Why You (Yes, You) Should Blog&quot;: . The top advice I would give my younger self would be to start blogging sooner. Here are some reasons to blog: . It’s like a resume, only better. I know of a few people who have had blog posts lead to job offers! | Helps you learn. Organizing knowledge always helps me synthesize my own ideas. One of the tests of whether you understand something is whether you can explain it to someone else. A blog post is a great way to do that. | I’ve gotten invitations to conferences and invitations to speak from my blog posts. I was invited to the TensorFlow Dev Summit (which was awesome!) for writing a blog post about how I don’t like TensorFlow. | Meet new people. I’ve met several people who have responded to blog posts I wrote. | Saves time. Any time you answer a question multiple times through email, you should turn it into a blog post, which makes it easier for you to share the next time someone asks. | . Perhaps her most important tip is this: . You are best positioned to help people one step behind you. The material is still fresh in your mind. Many experts have forgotten what it was like to be a beginner (or an intermediate) and have forgotten why the topic is hard to understand when you first hear it. The context of your particular background, your particular style, and your knowledge level will give a different twist to what you’re writing about. . The full details on how to set up a blog are in fastpages. If you don&#39;t have a blog already, take a look at that now, because we&#39;ve got a really great approach set up for you to start blogging for free, with no ads—and you can even use Jupyter Notebook! .",
            "url": "https://bollam1214.github.io/blog/fastbook/2021/08/16/ch2.html",
            "relUrl": "/fastbook/2021/08/16/ch2.html",
            "date": " • Aug 16, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Deep Learning Ch1 Notes",
            "content": "What you don&#39;t need, to deep learning . Myth(don&#39;t need) Truth . Lots of math | Just high school math is sufficient | . Lots of data | We&#39;ve seen record-breaking results with &lt;50 items of data | . Lots of expensive computers | You can get what you need for state of the art work for free | . A lot of world class research projects have come out of the fastai students based on a single GPU, using small data or without a traditional background. . Where is deep learning the best known approach? . Neural Networks: A Brief History . The Start . In 1943, Warren McCulloch and Walter Pitts developed a mathematical model of an artificial neuron. . In 1957, Frank Rosenblatt built the first device that actually used these principles, the Mark I Perceptron at Cornell. . We are now about to witness the birth of such a machine–-a machine capable of perceiving, recognizing and identifying its surroundings without any human training or control. . - Frank Rosenblatt . The First AI Winter . 1969, Marvin Minsky adn Seymour Papert wrote a book called Perceptrons and pointed out that a single layer of a NN cannot learn some simple but critical functions (such as XOR) and using multiple layers of the devices would allow these limitations to be addressed. Unfortunately, only the first of these insights was widely recognized. . The Second Winter . In theory, adding just one extra layer of neurons was enough to allow any mathematical function to be approximated with these neural networks, but in practice such networks were often too big and too slow to be useful. Although researchers showed 30 years ago that to get practical good performance you need to use even more layers of neurons, it is only in the last decade that this principle has been more widely appreciated and applied. . The fast.ai Learning Philosophy . Projects and Mindset . It helps to focus on your hobbies and passions–-setting yourself four or five little projects rather than striving to solve a big, grand problem tends to work better when you&#39;re getting started. . Questionnaire . After every chapter there are questionnaire instead of a summory of keynotes. It doesn&#39;t matter how many you get right but it just confirms that you haven&#39;t missed anything important. If you don&#39;t understand something after some time just continue and come back after a few chapters. . The Software: PyTorch, fastai, and Jupyter . fastai is built top of PyTorch and these are written in Python and it&#39;s the language we will use during this course. Many people think that fastai is just for beginners and teachers but it&#39;s actually using layered API which makes it infinite customizable and practical for every purpose. . Jupyter Notebook is coding environment often used by DL people. It&#39;s easier to experiment things using Jupyter Notebooks than running Python code in terminal. Linux highly recommended. . from fastai.vision.all import * path = untar_data(URLs.PETS)/&#39;images&#39; def is_cat(x): return x[0].isupper() dls = ImageDataLoaders.from_name_func( path, get_image_files(path), valid_pct=0.2, seed=42, label_func=is_cat, item_tfms=Resize(224)) learn = cnn_learner(dls, resnet34, metrics=error_rate) learn.fine_tune(1) . /usr/local/lib/python3.7/dist-packages/torch/nn/functional.py:718: UserWarning: Named tensors and all their associated APIs are an experimental feature and subject to change. Please do not use them for anything important until they are released as stable. (Triggered internally at /pytorch/c10/core/TensorImpl.h:1156.) return torch.max_pool2d(input, kernel_size, stride, padding, dilation, ceil_mode) . epoch train_loss valid_loss error_rate time . 0 | 0.160716 | 0.019510 | 0.006089 | 00:50 | . epoch train_loss valid_loss error_rate time . 0 | 0.071681 | 0.011917 | 0.004060 | 00:55 | . Above code classifies cat and dog images. This is a deep learning model. Notice that this happened in less than 2 minute. . What Is Machine Learning? . The training of programs developed by allowing a computer to learn from its experience, rather than through manually coding the individual steps. . In 1949, an IBM researcher named Arthur Samuel started working on machine learning. . By 1961 his checkers-playing program beat the Connecticut state champion. . In his classic 1962 essay &quot;Artificial Intelligence: A Frontier of Automation&quot;, he wrote: . Suppose we arrange for some automatic means of testing the effectiveness of any current weight assignment in terms of actual performance and provide a mechanism for altering the weight assignment so as to maximize the performance. . We need not go into the details of such a procedure to see that it could be made entirely automatic and to see that a machine so programmed would &quot;learn&quot; from its experience. . . using a model after it&#39;s trained looks like: . Limitations Inherent To Machine Learning . A model cannot be created without data. | A model can only learn to operate on the patterns seen in the input data used to train it. | This learning approach only creates predictions, not recommended actions. | It&#39;s not enough to just have examples of input data; we need labels for that data too | . Neural Network . Universal approximation theorem shows that Neural Network can solve any problem to any level of accuracy, in theory. | In practice, they are often a suitable kind of model, and you can focus your effort on the process of training them—that is, of finding good weight assignments. | . Stochastic Gradient Descent (SGD) . One could imagine that you might need to find a new &quot;mechanism&quot; for automatically updating weights for every problem. | a completely general way to update the weights of a neural network, to make it improve at any given task. | . . the effectiveness of ... → loss | weight assignment → parameters of Neural Networks | performance → predictions | mechanism for ... → stochastic gradient descent (SGD) | maximize the performance → Minimize the Loss | . How Our Image Recognizer Works . from fastai2.vision.all import * . Normally people import only parts they need but this method imports everything. fastai library is designed in a way that this only gives you the parts you need. . path = untar_data(URLs.PETS)/&#39;images&#39; . This downloads the dataset to computer if not exists. . def is_cat(x): return x[0].isupper() . This checks if the first character is uppercase because this is how cats are labeled. . dls = ImageDataLoaders.from_name_func( path, get_image_files(path), valid_pct=0.2, seed=42, label_func=is_cat, item_tfms=Resize(224)) . This creates &quot;data loader&quot;: . from_name_func: labels can be extracted using a function applied to the filename | valid_pct=0.2: randomly hold out 20% of the data as validation set; the remaining 80% is called the training set | seed=42: sets the random seed to make sure any differences are due to the changes to the model | item_tfms=Resize(224): each item is resized to a 224-pixel square | . Why 224 pixels? This is the standard size for historical reasons (old pretrained models require this size exactly), but you can pass pretty much anything. If you increase the size, you&#39;ll often get a model with better results (since it will be able to focus on more details), but at the price of speed and memory consumption; the opposite is true if you decrease the size. . learn = cnn_learner(dls, resnet34, metrics=error_rate) . Learner is the thing that learns. . It gets the data loader, architecture (in this case resnet34), and the metric human uses to evaluate it. | cnn_learner also has a parameter pretrained, which defaults to True. | . Using pretrained models is the most important method we have to allow us to train more accurate models, more quickly, with less data, and less time and money. . The 34 in resnet34 refers to the number of layers in this variant of the architecture (other options are 18, 50, 101, and 152). Models using architectures with more layers take longer to train, and are more prone to overfitting (i.e. you can&#39;t train them for as many epochs before the accuracy on the validation set starts getting worse). On the other hand, when using more data, they can be quite a bit more accurate. . learn.fine_tune(1) . Use one epoch to fit just those parts of the model necessary to get the new random head to work correctly with your dataset. | Use the number of epochs requested when calling the method to fit the entire model, updating the weights of the later layers (especially the head) faster than the earlier layers (which, as we&#39;ll see, generally don&#39;t require many changes from the pretrained weights). | Jargon Recap . Term Meaning . Label | The data that we&#39;re trying to predict, such as &quot;dog&quot; or &quot;cat&quot; | . Architecture | The template of the model that we&#39;re trying to fit; the actual mathematical function that we&#39;re passing the input data and parameters to | . Model | The combination of the architecture with a particular set of parameters | . Parameters | The values in the model that change what task it can do, and are updated through model training | . Fit | Update the parameters of the model such that the predictions of the model using the input data match the target labels | . Train | A synonym for fit | . Pretrained model | A model that has already been trained, generally using a large dataset, and will be fine-tuned | . Fine-tune | Update a pretrained model for a different task | . Transfer learning | Using a pretrained model for a task different to what it was originally trained for | . Epoch | One complete pass through the input data | . Loss | A measure of how good the model is, chosen to drive training via SGD | . Metric | A measurement of how good the model is, using the validation set, chosen for human consumption | . Validation set | A set of data held out from training, used only for measuring how good the model is | . Training set | The data used for fitting the model; does not include any data from the validation set | . Overfitting | Training a model in such a way that it remembers specific features of the input data, rather than generalizing well to data not seen during training | . CNN | Convolutional neural network; a type of neural network that works particularly well for computer vision tasks | . Classification vs Regression . A classification model is one which attempts to predict a class, or category | A regression model is one which attempts to predict one or more numeric quantities, such as a temperature or a location. | . Metric vs Loss . Loss: a &quot;measure of performance&quot; easy for stochastic gradient descent to use | metric: easy for you to understand and close to what you want the model to do | . Overfitting . the single most important and challenging issue when training . The risk is that if we train our model badly, instead of learning general lessons it effectively memorizes what it has already seen, and then it will make poor predictions about new images. . . Tip: Only Avoid Overfitting When Needed: We often see practitioners using over-fitting avoidance techniques even when they have enough data that they didn&#8217;t need to do so, ending up with a model that may be less accurate than what they could have achieved. . Use Judgment in Defining Test Sets . Suppose you want to split the time series data into training and validation sets. . A random subset is a poor choice . Instead, use the earlier data as your training set (and the later data for the validation set). . In the Kaggle distracted driver competition, the independent variables are pictures of drivers at the wheel of a car, and the dependent variables are categories such as texting, eating, or safely looking ahead. If you put one of the images in your training set and one in the validation set, your model will have an easy time making a prediction for the one in the validation set, so it will seem to be performing better than it would on new people. Another perspective is that if you used all the people in training your model, your model might be overfitting to particularities of those specific people, and not just learning the states (texting, eating, etc.). . . Note: Validation Sets and Test Sets: Just as we hold back the validation data from the training process, we must hold back the test set data even from ourselves. . Before the Next Lesson . Setup all tools | Get comfortable with the notebook, docs, and style of writing Python | .",
            "url": "https://bollam1214.github.io/blog/fastbook/2021/08/02/ch1.html",
            "relUrl": "/fastbook/2021/08/02/ch1.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Git & GitHub",
            "content": ". Summary . Git has given us the ability to keep track of any changes we make to code and to work with other people on it such that we can be working on multiple parts of the same project, and someone else working on the same project can also be working on multiple parts of the same project on different branches. . Git bash basic commands . git clone https://github.com/bollam1214/blog.git git status git add file_name git add folder_name // add all files in that folder git commit -am &quot;message&quot; //add all the files that has been changed in this directory and commit git add file_name git commit --amend (--no-edit) //update git push git log git reset git reset --hard &lt;commmit&gt; git reset --hard origin/master git pull . Branching . git branch git checkout -b new_branch_name git checkout branch_name git merge branch_name . Merge Conflicts . get rid of the commit markers | modify the file | commit and push | GitHub Pages . Repository name: user_name.github.io . Vim . You start in “normal mode” | i brings you to “insert mode” | esc brings you back to “normal mode” | :x equals :wq (:w save / :q exit) |",
            "url": "https://bollam1214.github.io/blog/git/cs50w/2021/07/26/git.html",
            "relUrl": "/git/cs50w/2021/07/26/git.html",
            "date": " • Jul 26, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "Jupyter Notebook Tricks",
            "content": "I just love this about working in Jupyter notebooks! It&#39;s so easy to gradually build what I want, and check my work every step of the way. I make a lot of mistakes, so this is really helpful to me... . - Jeremy Howard . Command Mode Shortcuts . There are a couple of useful keyboard shortcuts in Command Mode that you can leverage to make Jupyter Notebook faster to use. Remember that you can switch back and forth between Command Mode and Edit Mode with Esc and Enter. . xcv:: cut copy paste | h:: Show all shortcuts | m:: Convert cell to Markdown | y:: Convert cell to Code | d+d:: Delete cell | z:: Undo cell deletion | o:: Toggle between hide or show output | shift+↑/↓:: Select multiple cells. Once you have selected them you can operate on them like a batch (run, copy, paste etc). | shift+m:: Merge selected cells | . Cell Tricks . There are also some tricks that you can code into a cell: . ?function-name:: Shows the definition and docstring for that function | ??function-name:: Shows the source code for that function | doc(function-name):: Shows the definition, docstring and links to the documentation of the function (only works with fastai library imported) | Shift+Tab (press once):: See which parameters to pass to a function | Shift+Tab (press three times):: Get additional information on the method | . Line Magics . Line magics are functions that you can run on cells. They should be at the beginning of a line and take as an argument the rest of the line from where they are called. You call them by placing a &#39;%&#39; sign before the command. The most useful ones are: . %matplotlib inline:: Ensures that all matplotlib plots will be plotted in the output cell within the notebook and will be kept in the notebook when saved. | . This command is always called together at the beginning of every notebook of the fast.ai course. . %matplotlib inline . %timeit:: Runs a line ten thousand times and displays the average time it took to run. | . %timeit [i+1 for i in range(1000)] . 37.6 µs ± 3.71 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each) . %debug: Inspects a function which is showing an error using the Python debugger. If you type this in a cell just after an error, you will be directed to a console where you can inspect the values of all the variables. . Here are some other features that are very useful in Jupyter notebooks: . At any point, if you don&#39;t remember the exact spelling of a function or argument name, you can press Tab to get autocompletion suggestions. | When inside the parentheses of a function, pressing Shift and Tab simultaneously will display a window with the signature of the function and a short description. Pressing these keys twice will expand the documentation, and pressing them three times will open a full window with the same information at the bottom of your screen. | In a cell, typing ?func_name and executing will open a window with the signature of the function and a short description. | In a cell, typing ??func_name and executing will open a window with the signature of the function, a short description, and the source code. | If you are using the fastai library, we added a doc function for you: executing doc(func_name) in a cell will open a window with the signature of the function, a short description and links to the source code on GitHub and the full documentation of the function in the library docs. | Unrelated to the documentation but still very useful: to get help at any point if you get an error, type %debug in the next cell and execute to open the Python debugger, which will let you inspect the content of every variable. | .",
            "url": "https://bollam1214.github.io/blog/jupyter/ipynb/2021/07/23/jupyter.html",
            "relUrl": "/jupyter/ipynb/2021/07/23/jupyter.html",
            "date": " • Jul 23, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://bollam1214.github.io/blog/fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/fastpages/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://bollam1214.github.io/blog/fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/fastpages/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Just a nobody .",
          "url": "https://bollam1214.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://bollam1214.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}